{"ast":null,"code":"var isLocalhost=Boolean(window.location.hostname==='localhost');export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){var publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){return;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost.\ncheckValidServiceWorker(swUrl,config);navigator.serviceWorker.ready.then(function(){console.log('This web app service ');});}else{registerValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){console.log('New content and all ');if(config&&config.onUpdate){config.onUpdate(registration);}}else{console.log('Content is cached for offline use.');if(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/Users/apple/Downloads/dnd-tutorial-master/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  \n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        checkValidServiceWorker(swUrl, config);\n\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app service ' \n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content and all ' \n\n              );\n\n              \n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              \n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}