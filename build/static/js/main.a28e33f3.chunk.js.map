{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["item","id","v4","name","item2","App","useState","text","setText","title","items","state","setState","className","type","value","onChange","e","target","onClick","prev","todo","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","console","log","isDragging","draggableProps","dragHandleProps","placeholder","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAMMA,EAAO,CACXC,GAAIC,cACJC,KAAM,uCAGFC,EAAQ,CACZH,GAAIC,cACJC,KAAM,oBAuHOE,MApHf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,CACjC,KAAQ,CACNG,MAAO,OACPC,MAAO,CAACV,EAAMI,IAEhB,cAAe,CACbK,MAAO,cACPC,MAAO,IAET,KAAQ,CACND,MAAO,YACPC,MAAO,MAbE,mBAENC,EAFM,KAECC,EAFD,KA8Db,OACE,oCACA,gEACA,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,2BAAOA,UAAU,gBAAgBC,KAAK,OAAOC,MAAOR,EAAMS,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAOH,UAC5F,4BAAQF,UAAU,gBAAgBM,QA1BxB,WACdP,GAAS,SAAAQ,GACP,OAAO,eACFA,EADL,CAEEC,KAAM,CACJZ,MAAO,OACPC,MAAM,CACJ,CACET,GAAIC,cACJC,KAAMI,IAHL,mBAKAa,EAAKC,KAAKX,cAMrBF,EAAQ,MASJ,QAEF,kBAAC,IAAD,CAAiBc,UArDC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,OACnC,GAAKD,IAIDA,EAAYE,QAAUD,EAAOC,OAASF,EAAYG,cAAgBF,EAAOE,aAA7E,CAKA,IAAMC,EAAQ,eAAOhB,EAAMa,EAAOE,aAAahB,MAAMc,EAAOC,QAE5Db,GAAS,SAAAQ,GASP,OARAA,EAAI,eAAOA,IAENI,EAAOE,aAAahB,MAAMkB,OAAOJ,EAAOC,MAAO,GAIpDL,EAAKG,EAAYG,aAAahB,MAAMkB,OAAOL,EAAYE,MAAO,EAAGE,GAE1DP,QAiCJS,IAAEC,IAAInB,GAAO,SAACoB,EAAMC,GACnB,OACE,yBAAKA,IAAKA,EAAKnB,UAAW,UACxB,4BAAKkB,EAAKtB,OACV,kBAAC,IAAD,CAAWiB,YAAaM,IACrB,SAACC,EAAUC,GACV,OACE,uCACEC,IAAKF,EAASG,UACVH,EAASI,eAFf,CAGExB,UAAW,kBAEVkB,EAAKrB,MAAMoB,KAAI,SAACQ,EAAIb,GACnB,OACE,kBAAC,IAAD,CAAWO,IAAKM,EAAGrC,GAAIwB,MAAOA,EAAOc,YAAaD,EAAGrC,KAClD,SAACgC,EAAUC,GAEV,OADAM,QAAQC,IAAIP,GAEV,uCACErB,UAAS,eAAUqB,EAASQ,YAAc,YAC1CP,IAAKF,EAASG,UACVH,EAASU,eACTV,EAASW,iBAEZN,EAAGnC,YAOf8B,EAASY,wBCpHZC,QACW,cAA7BC,OAAOC,SAASC,UCGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.a28e33f3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport {v4} from \"uuid\";\n\nconst item = {\n  id: v4(),\n  name: \"Complete project before 15 may 2022\"\n}\n\nconst item2 = {\n  id: v4(),\n  name: \"How are you sir?\"\n}\n\nfunction App() {\n  const [text, setText] = useState(\"\")\n  const [state, setState] = useState({\n    \"todo\": {\n      title: \"Todo\",\n      items: [item, item2]\n    },\n    \"in-progress\": {\n      title: \"In Progress\",\n      items: []\n    },\n    \"done\": {\n      title: \"Completed\",\n      items: []\n    }\n  })\n\n  const handleDragEnd = ({destination, source}) => {\n    if (!destination) {\n      return\n    }\n\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\n      return\n    }\n\n    // Creating a copy of item before removing it from state\n    const itemCopy = {...state[source.droppableId].items[source.index]}\n\n    setState(prev => {\n      prev = {...prev}\n      // Remove from previous items array\n      prev[source.droppableId].items.splice(source.index, 1)\n\n\n      // Adding to new items array location\n      prev[destination.droppableId].items.splice(destination.index, 0, itemCopy)\n\n      return prev\n    })\n  }\n\n  const addItem = () => {\n    setState(prev => {\n      return {\n        ...prev,\n        todo: {\n          title: \"Todo\",\n          items: [\n            {\n              id: v4(),\n              name: text\n            },\n            ...prev.todo.items\n          ]\n        }\n      }\n    })\n\n    setText(\"\")\n  }\n\n  return (\n    <>\n    <h1>ðŸ‘‹  Welcome To 2DO App</h1>\n    <div className=\"App\">\n      <div className='addButton'>\n        <input className='inputAddItems' type=\"text\" value={text} onChange={(e) => setText(e.target.value)}/>\n        <button className='addItemButton' onClick={addItem}>Add</button>\n      </div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {_.map(state, (data, key) => {\n          return(\n            <div key={key} className={\"column\"}>\n              <h3>{data.title}</h3>\n              <Droppable droppableId={key}>\n                {(provided, snapshot) => {\n                  return(\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={\"droppable-col\"}\n                    >\n                      {data.items.map((el, index) => {\n                        return(\n                          <Draggable key={el.id} index={index} draggableId={el.id}>\n                            {(provided, snapshot) => {\n                              console.log(snapshot)\n                              return(\n                                <div\n                                  className={`item ${snapshot.isDragging && \"dragging\"}`}\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  {el.name}\n                                </div>\n                              )\n                            }}\n                          </Draggable>\n                        )\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )\n                }}\n              </Droppable>\n            </div>\n          )\n        })}\n      </DragDropContext>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  \n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        checkValidServiceWorker(swUrl, config);\n\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app service ' \n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content and all ' \n\n              );\n\n              \n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              \n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}